#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('express');
var app = require('../app');
var httpProxy = require('http-proxy');
var debug = require('debug')('server:server');
var http = require('http');
var cors = require('cors');
var swcTimeUrl = 'http://www.swcombine.com/ws/v1.0/api/helloworld/?';
var swcMe = 'http://www.swcombine.com/ws/v1.0/character/Tholme+So?';
var swcRateLimits = 'http://www.swcombine.com/ws/v1.0/api/ratelimits?';
var swcAuthUrl = 'http://www.swcombine.com/ws/oauth2/auth/?scope=character_read&state=profile&redirect_uri=http%3A%2F%2Flocalhost%3A3000&response_type=token&client_id=e5c1500bf34c3cec3761f3049cbc947e1299c7d8';
var swcMessages = 'http://www.swcombine.com/ws/v1.0/character/1305198/messages/?';
var swcAllFactions = 'http://www.swcombine.com/ws/v1.0/factions/?';
var swcSpecificFaction = 'http://www.swcombine.com/ws/v1.0/faction/20:981?';
var swcAllCities = 'http://www.swcombine.com/ws/v1.0/galaxy/cities/?';
var swcSpecificCity = 'http://www.swcombine.com/ws/v1.0/galaxy/cities/7:150228/?';
var proxyOptions = {
    changeOrigin: true
};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(express.static(__dirname + '/app'));
/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

app.use(cors());
app.options('*', cors());
/**
    * Http proxy for swcombine
**/
var apiProxy = httpProxy.createProxyServer(proxyOptions);

// Grab all requests to the server with "/space/".
app.all("/time/*", function(req, res) {
    console.log("Request made to /time/");
    console.log(req.url);
    apiProxy.web(req, res, {target: swcMe});
});

/**
 * Listen on provided port, on all network interfaces.
 */

app.listen(port);
app.on('error', onError);
app.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = app.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
